PROJECT 4 WRITE-UP
------------------

1) Briefly explain how you implemented comparison queries and how they affected your control block's signals (in a few sentences).

ANSWER:

There's two parts to our comparison query,  found within the "CM Stuff" box. The left circuit compares the result of the operation once it's finished with the ALU ("ALU Result") to figure out whether it's less than, equal to, or greater than. Then it uses the tunnels to report out the result using the multiplexer.


2) Please list your control block's control signals, and briefly explain what each one does (in a sentence or less each).

ANSWER:

In general, the control block is where we put circuits that acted as the "gatekeepers" of the CPU. Since the result of the CPU's computations were used for different purposes (such as writing to a register, or writing to the pc, etc.) based on the OP Code, the control block had the task of sending the results of the ALU to the correct destination.

Jump Cmd is activated when the control block recieves an OP code of 15. The Jump Cmd tunnel is connected to the PC incrimenter which adds 1 to the pc when
Jump Cmd is off, and sets the pc to the ALU result when Jump Cmd is on.

The next is Load Cmd. When the OP code is 10, control activates Load Cmd, which tells the RAM block to set itself for a load word. This also activates
a controlled buffer which sets memaddr to ALU result so we can output that we're reading from a certain address.

The Save Cmd is similar to Load cmd in that it sets the RAM to Write and also closes the buffer to MemAddr. However, in addition, it turns on memWrite and memData since
the computer needs to know that some value is about to be written to memory, and what the value is.

The fourth circuit in control checks the A-type that was already determined, and if it's an A2 type then we know it must be a CQ operation. This then writes
the ALU result to the CQ register.

The fifth circuit determines if this operation will write to a register. If so, then it sets "will write to reg" to true, which connects ALU Result to Write Val, which will
be the value written into a register. Then, once the clock rises, it will activate "write?" which will tell the REG block to write the Write Val to a register.

Throughout these circuits, the CQ output has veto power on whether or not this instruction will go through. Since the command block opens the gates to all the writes,
we can determine if any instruction goes through by checking the CQ first.


3) What features (if any) of this assembly language do you like?

ANSWER
We like that the CQ instruction allows more flexibility in the comparisons compared to MIPS, where you have a choice between beq for just equal and writing multiple lines for every other kind of comparison. 

4) What features (if any) of this assembly language do you not like?

ANSWER
We didn't like that the CQ instruction, which is analogous to the BEQ instruction in MIPS, requires two lines to do the same instruction, whereas it can be done with a single line in MIPS.